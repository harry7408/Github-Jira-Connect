name: Create Jira Issue
# 이슈 최초 생성 시만 Trigger 되도록 설정
on:
  issues:
    types: [opened]

permissions:
  contents: write
  issues: write

# 수행 될 Job
jobs:
  create-issue:
    name: Create Jira Issue
    runs-on: ubuntu-latest
    steps:
      # Jira에 로그인
      - name: Login
        uses: atlassian/gajira-login@v3
        env:
          JIRA_BASE_URL: ${{ secrets.JIRA_BASE_URL }}
          JIRA_API_TOKEN: ${{ secrets.JIRA_API_TOKEN }}
          JIRA_USER_EMAIL: ${{ secrets.JIRA_USER_EMAIL }}

      # Main Branch로 부터 코드 참조
      - name: Checkout main code
        uses: actions/checkout@v4
        with:
          ref: main

      # 이슈 파싱 (Issue Template으로 부터 파싱해오기 -> issue.body 내용 파싱)
      - name: Issue Parser
        uses: stefanbuck/github-issue-parser@v3
        id: issue-parser
        with:
          template-path: .github/ISSUE_TEMPLATE/issue_form.yaml

      # 이슈 파싱을 잘 했는지 확인하는 로그 출력
      - name: Log Issue Parser
        run: |
          echo "${{ steps.issue-parser.outputs-jsonString }}"

      # 마크다운 이슈 형태를 Jira에 맞게 전환
      - name: Convert markdown to Jira Syntax
        uses: peter-evans/jira2md@v2
        id: md2jira
        with:
          input-text: |
            ### Github Issue Link
            - ${{ github.event.issues.html_url }}
            
            ${{ github.event.issue.body }}
          mode: md2jira

      # Jira 이슈 생성
      - name: Create Issue
        id: create
        uses: atlassian/gajira-create@v3
        with:
          # 연동 할 Jira Project Key 값 입력
          project: ABC
          # 이슈 타입 선택 (이 부분에 들어갈 값이 Custom 등 하는 것에 따라 달라지는 것 같다)
          issuetype: Task
          summary: "${{ github.event.issue.title }}"
          description: "${{ steps.md2jira.outputs.output-text }}"
          fields: |
            {
              "parent": {
                "key": "${{ steps.issue-parser.outputs.issueparser_parentKey }}"
              }
            }

      # 생성된 이슈 로그 출력
      - name: Created issue's Log
        run: echo "Jira Issue ${{ steps.create.outputs.issue }} was created under parent ${{ steps.issue-parser.outputs.issueparser_parentKey }}"

      # Issue에 입력한 Ticket Number 기반으로 Branch 생성
      - name: Create branch with Ticket Number
        run: |
          ISSUE_NUMBER="${{ steps.create.outputs.issue }}"
          ISSUE_TITLE="${{ steps.issue-parser.outputs.issueparser_branch }}"
          BRANCH_NAME="${ISSUE_NUMBER}-$(echo ${ISSUE_TITLE} | sed 's/ /-/g')"
          git checkout -b "${BRANCH_NAME}"
          git push --set-upstream origin "${BRANCH_NAME}"

      # 이슈 제목 Update
      - name: Update Issue Title
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'update-issue'
          token: ${{ secrets.GH_PAT }}
          title: '[${{ steps.create.outputs.issue }}] ${{ github.event.issue.title }}'

      # Jira 링크 연결하는 댓글 추가
      - name: Add Comment With Jira Issue Link
        uses: actions-cool/issues-helper@v3
        with:
          actions: 'create-comment'
          token: ${{ secrets.GH_PAT }}
          issue-number: ${{ github.event.issue.number }}
          body: "Jira Issue Created: [${{ steps.create.outputs.issue }}](${{ secrets.JIRA_BASE_URL }}/browse/${{ steps.create.outputs.issue }})"

